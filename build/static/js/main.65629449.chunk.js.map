{"version":3,"sources":["logo.svg","App.js","reportWebVitals.js","index.js"],"names":["App","useState","input","setInput","resultado","setResultado","className","src","logo","alt","type","placeholder","onChange","e","target","value","style","textTransform","onClick","contador","listado_final","cadena","split","console","log","i","length","property","push","sort","a","b","valor_final","contador_multiplicador","forEach","element","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"2LAAe,MAA0B,iC,eC+D1BA,MA3Df,WAAgB,IAAD,EACaC,mBAAS,IADtB,mBACNC,EADM,KACCC,EADD,OAEqBF,mBAAS,GAF9B,mBAENG,EAFM,KAEKC,EAFL,KAoCb,OACE,qBAAKC,UAAU,MAAf,SACE,yBAAQA,UAAU,aAAlB,UACE,qBAAKC,IAAKC,EAAMF,UAAU,WAAWG,IAAI,SACzC,8EACA,uBACEC,KAAK,OACLC,YAAY,gBACZC,SAAU,SAACC,GAAD,OAAOV,EAASU,EAAEC,OAAOC,QACnCC,MAAO,CACLC,cAAe,eAInB,8BACGf,EADH,IACyB,IAAdE,EAAkB,kBAAoBA,EAAY,GAAI,OAEjE,wBAAQc,QAjDd,WAEE,IAAIC,EAAW,GACXC,EAAgB,GACdC,EAASnB,EAAMoB,MAAM,IAC3BC,QAAQC,IAAIH,GAEZ,IAAK,IAAII,EAAI,EAAGA,EAAIJ,EAAOK,OAAQD,IACjCN,EAASE,EAAOI,IACiB,qBAAxBN,EAASE,EAAOI,IACnBN,EAASE,EAAOI,IAAM,EACtB,EACNF,QAAQC,IAAIH,EAAOI,IAErB,IAAK,IAAME,KAAYR,EACrBI,QAAQC,IAAR,UAAeG,EAAf,aAA4BR,EAASQ,KACrCP,EAAcQ,KAAKT,EAASQ,IAE9BP,EAAcS,MAAK,SAACC,EAAGC,GAAJ,OAAUA,EAAID,KACjCP,QAAQC,IAAIJ,GACZ,IAAIY,EAAc,EACdC,EAAyB,EAC7Bb,EAAcc,SAAQ,SAACC,GAErBH,GAA4BG,GAAW,GAAKF,GAC5CA,GAAkD,KAEpDV,QAAQC,IAAI,oBAAqBQ,GACjC3B,EAAa2B,IAqBT,wCC7COI,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,K","file":"static/js/main.65629449.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","import logo from \"./logo.svg\";\nimport \"./App.css\";\nimport { useState } from \"react\";\n\nfunction App() {\n  const [input, setInput] = useState(\"\");\n  const [resultado, setResultado] = useState(0);\n\n  function conteo() {\n    //alert(input);\n    let contador = {};\n    let listado_final = [];\n    const cadena = input.split(\"\");\n    console.log(cadena);\n\n    for (var i = 0; i < cadena.length; i++) {\n      contador[cadena[i]] =\n        typeof contador[cadena[i]] !== \"undefined\"\n          ? contador[cadena[i]] + 1\n          : 1; //parseInt(contador[cadena[i]], 10) + 1;\n      console.log(cadena[i]);\n    }\n    for (const property in contador) {\n      console.log(`${property}: ${contador[property]}`);\n      listado_final.push(contador[property]);\n    }\n    listado_final.sort((a, b) => b - a);\n    console.log(listado_final);\n    let valor_final = 0;\n    let contador_multiplicador = 0;\n    listado_final.forEach((element) => {\n      //console.log(valor_final);\n      valor_final = valor_final + element * (26 - contador_multiplicador);\n      contador_multiplicador = contador_multiplicador + 1;\n    });\n    console.log(\"resultado final: \", valor_final);\n    setResultado(valor_final);\n    //return cadena.length;\n  }\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\n        <p>Ingrese palabra a calcular m√°ximo posible </p>\n        <input\n          type=\"text\"\n          placeholder=\"Ingrese texto\"\n          onChange={(e) => setInput(e.target.value)}\n          style={{\n            textTransform: \"uppercase\",\n          }}\n        />\n        {/* <p>`${input}`</p> */}\n        <p>\n          {input} {resultado !== 0 ? \" resultado es: \" + resultado : \"\"}{\" \"}\n        </p>\n        <button onClick={conteo}>Calcaular resultado </button>\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}